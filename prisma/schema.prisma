generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  password               String
  role                   Role      @default(USER)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  emailVerified          Boolean   @default(false)
  lastVerificationSent   DateTime?
  verificationAttempts   Int       @default(0)
  verificationCode       String?
  verificationCodeExpiry DateTime?
  cart                   Cart?
  orders                 Order[]
  reviews                Review[]
  wishlist               Wishlist?
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  image       String?
  products    Product[]
}

model Product {
  id                     String                  @id @default(cuid())
  name                   String
  slug                   String                  @unique
  description            String
  price                  Decimal                 @db.Decimal(10, 2)
  stock                  Int
  images                 String[]                @default([])
  categoryId             String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  discountPrice          Decimal?                @db.Decimal(10, 2)
  featured               Boolean                 @default(false)
  sale                   Float?
  saleEndDate            DateTime?
  salePrice              Float?
  thumbnails             String[]                @default([])
  anonymousCartItems     AnonymousCartItem[]
  anonymousWishlistItems AnonymousWishlistItem[]
  cartItems              CartItem[]
  orderItems             OrderItem[]
  category               Category                @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  details                ProductDetail[]
  variants               ProductVariant[]
  storages               ProductStorage[]
  reviews                Review[]
  wishlistItems          WishlistItem[]

  @@index([categoryId])
}

model Order {
  id              String         @id @default(cuid())
  userId          String
  status          OrderStatus    @default(PENDING)
  total           Decimal
  shippingName    String
  shippingPhone   String
  shippingAddress String
  shippingCity    String
  shippingNotes   String?
  paymentProof    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  couponId        String?
  discountAmount  Decimal?
  coupon          Coupon?        @relation(fields: [couponId], references: [id])
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  statusHistory   StatusUpdate[]

  @@index([couponId])
}

model OrderItem {
  id        String           @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  color     String?
  storageId String?
  status    OrderItemStatus? @default(ACTIVE)
  order     Order            @relation(fields: [orderId], references: [id])
  product   Product          @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String?
  userId    String?
  type      String   @default("site")
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([productId])
}

model AnonymousWishlist {
  id        String                  @id @default(cuid())
  sessionId String                  @unique
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  items     AnonymousWishlistItem[]
}

model AnonymousWishlistItem {
  id         String            @id @default(cuid())
  wishlistId String
  productId  String
  createdAt  DateTime          @default(now())
  product    Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   AnonymousWishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  couponId  String?
  coupon    Coupon?    @relation(fields: [couponId], references: [id])
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([couponId])
}

model CartItem {
  id            String   @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int      @default(1)
  selectedColor String?
  storageId     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model AnonymousCart {
  id        String              @id @default(cuid())
  sessionId String              @unique
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  couponId  String?
  coupon    Coupon?             @relation(fields: [couponId], references: [id])
  items     AnonymousCartItem[]

  @@index([couponId])
}

model AnonymousCartItem {
  id            String        @id @default(cuid())
  cartId        String
  productId     String
  quantity      Int           @default(1)
  selectedColor String?
  storageId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  cart          AnonymousCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

model StatusUpdate {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  comment   String?
  createdAt DateTime    @default(now())
  order     Order       @relation(fields: [orderId], references: [id])
}

model ProductDetail {
  id          String  @id @default(cuid())
  label       String
  description String
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id        String  @id @default(cuid())
  color     String
  quantity  Int
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductStorage {
  id             String                    @id @default(cuid())
  productId      String
  size           String                    // "128GB", "256GB", etc.
  price          Decimal                   @db.Decimal(10, 2)
  stock          Int
  salePercentage Float?                    // Optional sale percentage
  saleEndDate    DateTime?                 // Optional sale end date
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  
  product        Product                   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants       ProductStorageVariant[]   // Color variants for this specific storage
  
  @@index([productId])
}

model ProductStorageVariant {
  id        String         @id @default(cuid())
  storageId String
  color     String
  quantity  Int
  
  storage   ProductStorage @relation(fields: [storageId], references: [id], onDelete: Cascade)
  
  @@index([storageId])
}

model Coupon {
  id             String          @id @default(cuid())
  code           String          @unique
  endDate        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isEnabled      Boolean         @default(true)
  name           String
  type           CouponType
  usedBy         String[]        @default([])
  usedCount      Int             @default(0)
  userLimit      Int?
  value          Float
  anonymousCarts AnonymousCart[]
  carts          Cart[]
  orders         Order[]
}

model SiteSettings {
  id                 String   @id @default("site-settings")
  maintenanceMode    Boolean  @default(false)
  maintenanceMessage String   @default("Site is under maintenance. Please try again later.")
  updatedAt          DateTime @default(now()) @updatedAt
}

model CarouselImage {
  id        String   @id @default(cuid())
  url       String
  order     Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([order])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderItemStatus {
  ACTIVE
  CANCELLED
}

enum CouponType {
  PERCENTAGE
  FIXED
}
